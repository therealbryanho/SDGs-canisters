type ApiError = variant { ZeroAddress; InvalidTokenId; Unauthorized; Other };
type Dip721NFT = service {
  balanceOfDip721 : (principal) -> (nat64) query;
  getMaxLimitDip721 : () -> (nat16) query;
  getMetadataDip721 : (TokenId) -> (MetadataResult) query;
  getMetadataForUserDip721 : (principal) -> (ExtendedMetadataResult);
  getTokenIdsForUserDip721 : (principal) -> (vec TokenId) query;
  logoDip721 : () -> (LogoResult) query;
  mintDip721 : (principal, MetadataDesc) -> (MintReceipt);
  nameDip721 : () -> (text) query;
  ownerOfDip721 : (TokenId) -> (OwnerResult) query;
  safeTransferFromDip721 : (principal, principal, TokenId) -> (TxReceipt);
  supportedInterfacesDip721 : () -> (vec InterfaceId) query;
  symbolDip721 : () -> (text) query;
  totalSupplyDip721 : () -> (nat64) query;
  transferFromDip721 : (principal, principal, TokenId) -> (TxReceipt);
};
type Dip721NonFungibleToken = record {
  maxLimit : nat16;
  logo : LogoResult;
  name : text;
  symbol : text;
};
type ExtendedMetadataResult = variant {
  Ok : record { token_id : TokenId; metadata_desc : MetadataDesc };
  Err : ApiError;
};
type InterfaceId = variant {
  Burn;
  Mint;
  Approval;
  TransactionHistory;
  TransferNotification;
};
type LogoResult = record { data : text; logo_type : text };
type MetadataDesc = vec MetadataPart;
type MetadataKeyVal = record { key : text; val : MetadataVal };
type MetadataPart = record {
  data : vec nat8;
  key_val_data : vec MetadataKeyVal;
  purpose : MetadataPurpose;
};
type MetadataPurpose = variant { Preview; Rendered };
type MetadataResult = variant { Ok : MetadataDesc; Err : ApiError };
type MetadataVal = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  Nat8Content : nat8;
  NatContent : nat;
  Nat16Content : nat16;
  BlobContent : vec nat8;
  TextContent : text;
};
type MintReceipt = variant { Ok : MintReceiptPart; Err : ApiError };
type MintReceiptPart = record { id : nat; token_id : TokenId };
type OwnerResult = variant { Ok : principal; Err : ApiError };
type TokenId = nat64;
type TxReceipt = variant { Ok : nat; Err : ApiError };
service : Dip721NFT